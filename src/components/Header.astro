---
import { menuMain } from "../data/menus.js";

const rmTrailingSlash = (path: string): string => {
  return path.endsWith("/") && path.length > 1
    ? path.slice(0, path.length - 1)
    : path;
};

const pathname = rmTrailingSlash(Astro.url.pathname);
---

<header
  x-data="headerMenu()"
  x-init="init()"
  @keydown.window.escape="closeMenu()"
  @keydown.window="handleGlobalKeydown($event)"
  class="sticky top-0 z-50 bg-white/95 backdrop-blur border-b border-black/5"
>
  <div class="container py-4 lg:py-6">
    <nav class="flex items-center justify-between gap-6" aria-label="Global">
      <a href="/" class="-m-1.5 p-1.5" aria-label="St. George Pizza home">
        <p class="font-black text-3xl sm:text-4xl text-brand-green">
          St. George<span
            class="text-brand-red bg-brand-red/5 px-3 ml-1 rounded-lg"
            >Pizza</span
          >
        </p>
      </a>
      <div class="flex items-center gap-4">
        <a
          href="tel:+14352155512"
          class="hidden text-sm font-semibold text-brand-green transition hover:text-brand-red lg:inline-flex lg:items-center lg:gap-2"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            class="size-5"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M2.25 6.75c0 8.284 6.716 15 15 15h1.5a2.25 2.25 0 0 0 2.25-2.25v-1.5a1.125 1.125 0 0 0-.75-1.06l-4.5-1.5a1.125 1.125 0 0 0-1.4.57l-.9 1.8a.75.75 0 0 1-1.04.33 11.25 11.25 0 0 1-5.06-5.06.75.75 0 0 1 .33-1.04l1.8-.9a1.125 1.125 0 0 0 .57-1.4l-1.5-4.5A1.125 1.125 0 0 0 8.25 2.25h-1.5A2.25 2.25 0 0 0 4.5 4.5v2.25z"
            />
          </svg>
          (435) 215-5512
        </a>
        <button
          type="button"
          class="-m-3 inline-flex size-12 items-center justify-center rounded-full p-3 text-brand-green transition hover:bg-brand-green/10 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-green lg:hidden"
          @click="toggleMenu()"
          :aria-expanded="open"
          aria-controls="mobile-menu"
          x-ref="menuToggle"
        >
          <span class="sr-only">Toggle main menu</span>
          <svg
            class="size-8"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
            data-slot="icon"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
            ></path>
          </svg>
        </button>
      </div>
      <div class="hidden lg:flex lg:gap-x-10 lg:items-center">
        {
          menuMain.map((item) => (
            <a
              href={item.url}
              class={`transition text-base/6 font-semibold hover:text-brand-green ${item.highlighted ? "menu-item-highlighted" : ""} ${pathname === item.url ? "menu-item-active" : ""}`}
            >
              {item.name}
            </a>
          ))
        }
      </div>
    </nav>
    <div
      class="lg:hidden fixed inset-0 z-50"
      x-ref="dialog"
      x-show="open"
      x-cloak
      aria-modal="true"
      role="dialog"
      aria-labelledby="mobile-menu-heading"
      id="mobile-menu"
    >
      <div
        class="h-full w-full overflow-y-auto bg-white px-6 py-6"
        x-show="open"
        x-transition:enter="transition ease-out duration-200"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-150"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        x-cloak
        @click.self="closeMenu()"
      >
        <div class="flex items-center justify-between">
          <a href="/" class="-m-1.5 p-1.5" aria-label="St. George Pizza home">
            <p class="font-black text-3xl text-brand-green">
              St. George<span class="text-brand-red">Pizza</span>
            </p>
          </a>
          <button
            type="button"
            class="-m-3 inline-flex size-12 items-center justify-center rounded-full p-3 text-brand-red transition hover:bg-brand-red/10 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-red"
            @click="closeMenu()"
            x-ref="closeButton"
          >
            <span class="sr-only">Close menu</span>
            <svg
              class="size-8"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="2"
              stroke="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M6 18 18 6M6 6l12 12"
              ></path>
            </svg>
          </button>
        </div>
        <div class="mt-6 space-y-10">
          <h2 id="mobile-menu-heading" class="sr-only">Main navigation</h2>
          <div class="grid gap-4">
            {
              menuMain.map((item, index) => (
                <a
                  @click="closeMenu()"
                  href={item.url}
                  class={`block rounded-full px-6 py-3 text-center text-lg font-semibold shadow-sm ring-1 ring-black/5 transition hover:bg-brand-green/10 ${item.highlighted ? "menu-item-highlighted !py-3" : ""} ${pathname === item.url ? "menu-item-active" : ""}`}
                  x-ref={index === 0 ? "firstMobileLink" : undefined}
                  data-mobile-menu-link
                >
                  {item.name}
                </a>
              ))
            }
          </div>
          <div class="rounded-3xl bg-brand-green/10 px-6 py-5 text-center">
            <p class="text-sm font-semibold uppercase tracking-[0.2em] text-brand-green">
              Reservations
            </p>
            <p class="mt-2 text-2xl font-bold">(435) 215-5512</p>
            <a
              class="mt-3 inline-flex items-center justify-center gap-2 rounded-full bg-brand-red px-6 py-3 text-sm font-semibold text-white shadow-lg shadow-brand-red/30"
              href="/book"
            >
              Book a table
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                class="size-4"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z"
                  clip-rule="evenodd"
                ></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // @ts-nocheck
  document.addEventListener("alpine:init", () => {
    Alpine.data("headerMenu", () => ({
      open: false,
      lastFocusedEl: null,
      init() {
        this.$watch("open", (value) => {
          if (value) {
            this.lastFocusedEl = document.activeElement;
            document.documentElement.style.setProperty("overflow", "hidden");
            this.$nextTick(() => {
              this.focusFirstItem();
            });
          } else {
            document.documentElement.style.removeProperty("overflow");
            if (this.lastFocusedEl && typeof this.lastFocusedEl.focus === "function") {
              this.lastFocusedEl.focus();
            }
          }
        });
      },
      toggleMenu() {
        this.open ? this.closeMenu() : this.openMenu();
      },
      openMenu() {
        if (!this.open) {
          this.open = true;
        }
      },
      closeMenu() {
        if (this.open) {
          this.open = false;
        }
      },
      focusFirstItem() {
        const first = this.$refs.firstMobileLink || this.getFocusableElements()[0];
        if (first && typeof first.focus === "function") {
          first.focus({ preventScroll: true });
        }
      },
      handleGlobalKeydown(event) {
        if (!this.open) return;
        if (event.key === "Tab") {
          this.maintainFocus(event);
        }
      },
      maintainFocus(event) {
        const focusable = this.getFocusableElements();
        if (!focusable.length) return;
        const first = focusable[0];
        const last = focusable[focusable.length - 1];
        const active = document.activeElement;

        if (event.shiftKey && active === first) {
          event.preventDefault();
          last.focus();
        } else if (!event.shiftKey && active === last) {
          event.preventDefault();
          first.focus();
        }
      },
      getFocusableElements() {
        const container = this.$refs.dialog;
        if (!container) return [];
        return Array.from(
          container.querySelectorAll(
            'a[href]:not([tabindex="-1"]), button:not([disabled]):not([tabindex="-1"]), [tabindex]:not([tabindex="-1"])'
          )
        ).filter((el) => !el.hasAttribute("data-focus-guard"));
      },
    }));
  });
</script>
