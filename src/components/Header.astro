---
import { menuMain } from "../data/menus.js";
import { phone } from "../data/config";

const normalizePath = (path: string): string => {
  if (path.length > 1 && path.endsWith("/")) {
    return path.slice(0, -1);
  }
  return path;
};

const pathname = normalizePath(Astro.url.pathname);
---

<header
  x-data="headerMenu()"
  x-init="init()"
  @keydown.window.escape="closeMenu()"
  class="sticky top-0 z-50 border-b border-black/5 bg-[rgba(247,241,232,0.92)] backdrop-blur"
>
  <div class="container">
    <nav class="flex items-center justify-between gap-6 py-4" aria-label="Main navigation">
      <a href="/" class="flex items-center gap-3" aria-label="St. George Pizza home">
        <span class="flex size-11 items-center justify-center rounded-full bg-[rgba(140,30,33,0.12)] text-[color:var(--color-brick)]">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            class="size-6"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3 8.25c0-.621.504-1.125 1.125-1.125H5.25c.621 0 1.125.504 1.125 1.125V21a.75.75 0 0 1-1.125.65L3.75 20.25l-1.5 1.4A.75.75 0 0 1 1.125 21V8.25C1.125 5.35 3.475 3 6.375 3H12"
            />
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M21.75 8.25c0-.621-.504-1.125-1.125-1.125h-1.125A1.125 1.125 0 0 0 18.375 8.25V21a.75.75 0 0 0 1.125.65l1.5-1.4 1.5 1.4a.75.75 0 0 0 1.125-.65V8.25c0-2.9-2.35-5.25-5.25-5.25h-3.75"
            />
          </svg>
        </span>
        <div class="flex flex-col leading-tight">
          <span class="text-sm font-semibold uppercase tracking-[0.28em] text-[color:var(--color-forest)]">St. George</span>
          <span class="text-2xl font-bold text-[color:var(--color-brick)]">Pizza</span>
        </div>
      </a>

      <div class="hidden lg:flex lg:items-center lg:gap-10">
        {menuMain.map((item) => {
          const active = pathname === normalizePath(item.url);
          return (
            <a
              href={item.url}
              class={`relative text-sm font-semibold uppercase tracking-[0.24em] text-[color:var(--color-forest)] transition hover:text-[color:var(--color-brick)] ${
                active ? "after:absolute after:-bottom-2 after:left-0 after:h-[2px] after:w-full after:bg-[color:var(--color-brick)]" : ""
              }`}
            >
              {item.name}
            </a>
          );
        })}
      </div>

      <div class="hidden lg:flex lg:items-center lg:gap-6">
        <a
          href={phone.href}
          class="flex items-center gap-2 text-sm font-semibold text-[color:var(--color-forest)] transition hover:text-[color:var(--color-brick)]"
        >
          <span class="inline-flex size-9 items-center justify-center rounded-full bg-[rgba(31,61,59,0.12)] text-[color:var(--color-forest)]">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="1.5"
              class="size-5"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M2.25 6.75c0 8.284 6.716 15 15 15h1.5a2.25 2.25 0 0 0 2.25-2.25v-1.5a1.125 1.125 0 0 0-.75-1.06l-4.5-1.5a1.125 1.125 0 0 0-1.4.57l-.9 1.8a.75.75 0 0 1-1.04.33 11.25 11.25 0 0 1-5.06-5.06.75.75 0 0 1 .33-1.04l1.8-.9a1.125 1.125 0 0 0 .57-1.4l-1.5-4.5A1.125 1.125 0 0 0 8.25 2.25h-1.5A2.25 2.25 0 0 0 4.5 4.5v2.25z"
              />
            </svg>
          </span>
          {phone.label}
        </a>
        <a href="/book" class="button button-primary text-sm uppercase tracking-[0.25em] !py-3 !px-6">
          Reserve
        </a>
      </div>

      <button
        type="button"
        class="lg:hidden inline-flex size-11 items-center justify-center rounded-full border border-black/10 bg-white text-[color:var(--color-forest)]"
        @click="toggleMenu()"
        :aria-expanded="open"
        aria-controls="mobile-menu"
      >
        <span class="sr-only">Toggle navigation</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          class="size-6"
          aria-hidden="true"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 7h16M4 12h16M4 17h16" />
        </svg>
      </button>
    </nav>
  </div>

  <div
    class="lg:hidden"
    x-cloak
    x-show="open"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 -translate-y-4"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 translate-y-0"
    x-transition:leave-end="opacity-0 -translate-y-4"
    id="mobile-menu"
  >
    <div class="container pb-6">
      <div class="rounded-3xl bg-white p-6 shadow-[var(--shadow-soft)] ring-1 ring-black/5">
        <div class="flex items-center justify-between">
          <div class="flex flex-col">
            <span class="text-xs font-semibold uppercase tracking-[0.35em] text-[color:var(--color-forest)]">St. George</span>
            <span class="text-xl font-bold text-[color:var(--color-brick)]">Pizza</span>
          </div>
          <button
            type="button"
            class="inline-flex size-10 items-center justify-center rounded-full border border-black/10 text-[color:var(--color-brick)]"
            @click="closeMenu()"
          >
            <span class="sr-only">Close menu</span>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="2"
              stroke="currentColor"
              class="size-6"
              aria-hidden="true"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <nav class="mt-6 space-y-3" aria-label="Mobile navigation">
          {menuMain.map((item, index) => {
            const active = pathname === normalizePath(item.url);
            return (
              <a
                href={item.url}
                class={`flex items-center justify-between rounded-2xl px-4 py-3 text-base font-semibold transition ${
                  active ? "bg-[rgba(140,30,33,0.12)] text-[color:var(--color-brick)]" : "bg-[rgba(31,61,59,0.04)] text-[color:var(--color-forest)] hover:bg-[rgba(31,61,59,0.08)]"
                }`}
                @click="closeMenu()"
                x-ref={index === 0 ? "firstLink" : undefined}
              >
                <span>{item.name}</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="1.5"
                  class="size-5"
                  aria-hidden="true"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" d="m9 5 7 7-7 7" />
                </svg>
              </a>
            );
          })}
        </nav>

        <div class="mt-6 space-y-3 rounded-2xl bg-[rgba(140,30,33,0.08)] p-5 text-[color:var(--color-forest)]">
          <p class="text-xs font-semibold uppercase tracking-[0.3em] text-[color:var(--color-brick)]">Need a table tonight?</p>
          <a href={phone.href} class="text-lg font-bold text-[color:var(--color-brick)]">
            {phone.label}
          </a>
          <a href="/book" class="button button-primary w-full justify-center text-xs uppercase tracking-[0.3em]">
            Reserve online
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // @ts-nocheck
  document.addEventListener("alpine:init", () => {
    Alpine.data("headerMenu", () => ({
      open: false,
      lastFocusedEl: null,
      init() {
        this.$watch("open", (value) => {
          if (value) {
            this.lastFocusedEl = document.activeElement;
            document.documentElement.style.setProperty("overflow", "hidden");
            this.$nextTick(() => {
              const first = this.$refs.firstLink;
              first?.focus?.({ preventScroll: true });
            });
          } else {
            document.documentElement.style.removeProperty("overflow");
            this.lastFocusedEl?.focus?.();
          }
        });
      },
      toggleMenu() {
        this.open = !this.open;
      },
      closeMenu() {
        this.open = false;
      },
    }));
  });
</script>
