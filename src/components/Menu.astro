---
import { getCollection } from "astro:content";
import { siteLang, siteCurrency } from "../data/config";
import type { Plate, PlateItem } from "../types";

const plates: Plate[] = await getCollection("plates");
const siteLangFormat = siteLang.replace("_", "-");
---

<div class="space-y-16">
  <div class="sticky top-24 z-10">
    <nav class="rounded-full border border-[rgba(27,29,33,0.12)] bg-white/90 px-3 py-2 shadow-[var(--shadow-soft)]">
      <ul class="flex items-center gap-2 overflow-x-auto text-sm font-semibold uppercase tracking-[0.28em] text-[color:var(--color-forest)]">
        {plates.map((plate: Plate) => (
          <li>
            <a
              href={`#${plate.data.slug}`}
              class="menu-pill block rounded-full px-4 py-2 transition"
              data-category-link={plate.data.slug}
            >
              {plate.data.prettyName}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>

  <div class="space-y-24">
    {plates.map((plate: Plate) => (
      <section
        id={plate.data.slug}
        class="scroll-mt-32 space-y-12"
        data-category-section={plate.data.slug}
      >
        <div class="mx-auto max-w-3xl text-center space-y-3">
          <h3 class="text-3xl font-semibold text-[color:var(--color-brick)]">
            {plate.data.prettyName}
          </h3>
          <p class="text-base text-[rgba(27,29,33,0.7)]">{plate.data.description}</p>
        </div>

        <dl class="grid gap-10 lg:grid-cols-2 lg:gap-14">
          {plate.data.plates.map((item: PlateItem) => (
            <div class="rounded-3xl bg-white/90 p-6 shadow-[var(--shadow-soft)] ring-1 ring-black/5">
              <dt class="flex items-start justify-between gap-4">
                <span class="text-xl font-semibold text-[color:var(--color-forest)]">{item.name}</span>
                <span class="text-sm font-semibold tracking-[0.2em] text-[color:var(--color-brick)]">
                  {new Intl.NumberFormat(siteLangFormat, {
                    style: "currency",
                    currency: siteCurrency,
                  }).format(item.price)}
                </span>
              </dt>
              <dd class="mt-3 text-[rgba(27,29,33,0.7)]">{item.description}</dd>
            </div>
          ))}
        </dl>
      </section>
    ))}
  </div>
</div>

<style>
  .menu-pill {
    color: rgba(31, 61, 59, 0.7);
  }
  .menu-pill.is-active {
    background: rgba(140, 30, 33, 0.15);
    color: var(--color-brick);
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const links = document.querySelectorAll<HTMLAnchorElement>("[data-category-link]");
    const sections = document.querySelectorAll<HTMLElement>("[data-category-section]");
    if (!links.length || !sections.length) return;

    const setActive = (id: string | null) => {
      if (!id) return;
      links.forEach((link) => {
        link.classList.toggle("is-active", link.getAttribute("data-category-link") === id);
      });
    };

    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries
          .filter((entry) => entry.isIntersecting)
          .sort((a, b) => b.intersectionRatio - a.intersectionRatio)[0];
        if (visible) {
          const id = (visible.target as HTMLElement).getAttribute("data-category-section");
          if (id) setActive(id);
        }
      },
      {
        rootMargin: "-50% 0px -40% 0px",
        threshold: [0, 0.25, 0.5, 0.75, 1],
      }
    );

    sections.forEach((section) => observer.observe(section));

    const hash = window.location.hash.replace("#", "");
    if (hash) {
      setActive(hash);
    } else {
      const first = sections[0]?.getAttribute("data-category-section");
      if (first) setActive(first);
    }
  });
</script>
